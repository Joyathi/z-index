mongo - open a connection to the mongo instance
show dbs - show all database
use db-name - create and switch to the database
db-prints current database
db.dropDatabase() - Delete the current database

show- collections - show all collections in database
db.createCollection ("users") - createa collection with name users

CRUD - Creat Read update Delete

//Create
db.users.insertOne({name :"Rahul"})//Creats a new document inside the 'users' collection
db.users.insertOne({age :"35"})

db.users.insertMany([{name: "Rahul"}, {name : "Kyle"}])//creates multiple new documents inside the "users" collection

{
    name :"abc",
    age :"18",
}

db.user.insertOne({firstName :"jhone",
lastName :"King",
salary :"34000",
DOB :new Date ('Mar 25 ,2001'),
skills :["Angular","React","mongoDB"],
adderss:{
    street:"upper street",
    house:"No 1",
    city:"New York",
    country:"USA"
}});

//read
db.users.find()// Get all documents from user's collection

db.users.find(<filter object>) //Finds all documents that matches the filter object
db.users.find({age : "35"})

db.users.find(<filter object>) // Finds all documents that matches the object but returns the files specified in the select object
db.users.find({age :"35"},{name :1,_id :0})

db.users.findOne({name : "Rahul"})// only returns the first document that matches the filter object

db.users.countDocuments(<filter object>)// returns documents matching the filter object . if filter object returns all documents count

//update
db.users.updateOne({name : "Rahul"},{$set : {name : "Rahul1"}}) Replace Rahul, considers only the first match

db.users.updateMany({name : "Rahul1"},{$set : {name : "Rahul2"}})Replace  Rahul1 with Rahul2, considers all the matches
 
db
